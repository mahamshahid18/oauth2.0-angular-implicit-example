/**
  * DropboxLib
  *
  * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
  */

;(function (angular) {
'use strict';

angular.module('DropboxLib')
    .factory('OAuthManager', ['$q',
        '$window',
        '$rootScope',
        'BaseController',
        'OAuthProviderErrorEnum',
        'Configuration',
        'Servers',
        'APIHelper',
        OAuthManager
    ]);

    function OAuthManager($q,
        $window,
        $rootScope,
        BaseController,
        OAuthProviderErrorEnum,
        Configuration,
        Servers,
        APIHelper) {
        return {

            /*
             * Function to build the Authorization URL
             *
             * @param   scope  {array}  An array of all scopes needed (optional)
             * @param   state  {string} The state string (optional)
             *
             * @return   {string}  The authorization URL
             */
            buildAuthorizationUrl: function (scope, state) {
                // prepare query string for API call
                var _baseUri = Configuration.getBaseUri(Servers.AUTH);

                var _queryBuilder = _baseUri + '/authorize';

                var scopeString = this.convertScopeArrayToList(scope);
                var queryParams = {
                    response_type: 'token',
                    client_id: Configuration.oAuthClientId,
                    redirect_uri: Configuration.oAuthRedirectUri,
                };

                if (scope) {
                    queryParams.scope = scopeString;
                }
                if (state) {
                    queryParams.state = state;
                }

                // process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, queryParams);

                // validate url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                return _queryUrl;
            },

            /*
             * Helper function to convert array of scopes into a space-delimited string
             *
             * @param   scope  {array}  An array of all scopes needed (optional)
             *
             * @return    {string}  Space delimited string/list of scopes
             */
            convertScopeArrayToList: function(scope) {
                var scopeList = '';
                if (scope) {
                    if (scope.length > 1) {
                        scopeList = scope.join(' ');
                    } else {
                        scopeList = scope[0];
                    }
                }
                return scopeList;
            },

            /*
             * Helper function to build and open auth url in a new window
             * and receive the access token from the callback script
             *
             * @param   scope  {array}  An array of all scopes needed (optional)
             * @param   state  {string}  The state string (optional)
             * @param   popup  {bool}  Bool to indicate if auth url should be opened
             *                         in a new window or a popup. True if popup required
             *
             * @return    {Promise}  The resolved or rejected Promise containing the
             *                       access token or error message
             */
            getToken: function(scope, state, popup) {
                var deferred = $q.defer();

                var url = this.buildAuthorizationUrl(scope, state);
                if(popup) {
                    window.open(url, 'Authorize', 'width=650, height=550');
                } else {
                    window.open(url);
                }

                angular.element($window).bind('message', function(event) {
                    // Use JQuery originalEvent if present
                    event = event.originalEvent || event;
                    if (event.origin === window.location.origin) {
                      $rootScope.$apply(function() {
                        if (event.data.access_token) {
                            deferred.resolve(event.data);
                        } else {
                            deferred.reject(event.data);
                        }
                      });
                    }
                });

                return deferred.promise;
            },

            /*
             * Calls the function to get the access token in a new tab
             * and stores it in the Configuration OAuth object
             *
             * @param   scope  {array}  An array of all scopes needed (optional)
             * @param   state  {string}  The state string (optional)
             * @param   popup  {bool}  Bool to indicate if auth url should be opened
             *                         in a new window or a popup. True if popup required
             *
             * @return    {Promise}  The resolved or rejected Promise
             */
            retrieveAndSetAccessToken: function(scope, state, popup) {
                var promise = this.getToken(scope, state, popup);
                promise.then(function(data) {
                    var token = BaseController.getObjectMapper().mapObject(data, 'OAuthToken');
                    token.expiry = Date.now() + token.expiresIn;
                    Configuration.oAuthToken = token;
                    Configuration.oAuthTokenUpdateCallback(Configuration.oAuthToken);
                });

                return promise;
            },

            /*
             * Helper function to check if token has been successfully
             * retrieved and set in the configuration file
             *
             * @return    {Promise}  The resolved or rejected Promise
             */
            isTokenRetrievedAndSet: function() {
                var deferred = $q.defer();
                if(Object.keys(Configuration.oAuthToken).length > 0) {
                    deferred.resolve();
                } else {
                    deferred.reject();
                }
                return deferred.promise;
            },

            /*
             * Helper function to build and return an error object
             * when client has not been initialized properly
             *
             * @return    {object}  The error object containing information about the error
             */
            getInvalidClientError: function() {
                var errorModel = {
                    error: OAuthProviderErrorEnum.INVALID_CLIENT,
                    errorDescription: 'The client has not been authorized',
                    errorUri: '',
                };

                return errorModel;
            },

        };
    }

}(angular));
