/**
 * DropboxLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of OAuthToken
 *
 * @constructor
 */
angular.module('DropboxLib')
    .factory('OAuthToken', ['BaseModel', OAuthTokenModel]);

    function OAuthTokenModel(BaseModel) {
        var OAuthToken = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.accessToken = this.getValue(obj.accessToken);
            this.tokenType = this.getValue(obj.tokenType);
            this.expiresIn = this.getValue(obj.expiresIn);
            this.scope = this.getValue(obj.scope);
            this.expiry = this.getValue(obj.expiry);
        };

        OAuthToken.prototype = new BaseModel();
        OAuthToken.prototype.constructor = OAuthToken;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        OAuthToken.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'accessToken', realName: 'access_token' },
                { name: 'tokenType', realName: 'token_type' },
                { name: 'expiresIn', realName: 'expires_in' },
                { name: 'scope', realName: 'scope' },
                { name: 'expiry', realName: 'expiry' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        OAuthToken.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * Access token
         *
         * @return {string}
         */
        OAuthToken.prototype.getAccessToken = function () {
            return this.accessToken;
        };
    
        /**
         * Setter for AccessToken
         * 
         * @param {string} value 
         */
        OAuthToken.prototype.setAccessToken = function (value) {
            this.accessToken = value;
        };
    
        /**
         * Type of access token
         *
         * @return {string}
         */
        OAuthToken.prototype.getTokenType = function () {
            return this.tokenType;
        };
    
        /**
         * Setter for TokenType
         * 
         * @param {string} value 
         */
        OAuthToken.prototype.setTokenType = function (value) {
            this.tokenType = value;
        };
    
        /**
         * Time in seconds before the access token expires
         *
         * @return {long|null}
         */
        OAuthToken.prototype.getExpiresIn = function () {
            return this.expiresIn;
        };
    
        /**
         * Setter for ExpiresIn
         * 
         * @param {long|null} value 
         */
        OAuthToken.prototype.setExpiresIn = function (value) {
            this.expiresIn = value;
        };
    
        /**
         * List of scopes granted
     * This is a space-delimited list of strings.
         *
         * @return {string|null}
         */
        OAuthToken.prototype.getScope = function () {
            return this.scope;
        };
    
        /**
         * Setter for Scope
         * 
         * @param {string|null} value 
         */
        OAuthToken.prototype.setScope = function (value) {
            this.scope = value;
        };
    
        /**
         * Time of token expiry as unix timestamp (UTC)
         *
         * @return {long|null}
         */
        OAuthToken.prototype.getExpiry = function () {
            return this.expiry;
        };
    
        /**
         * Setter for Expiry
         * 
         * @param {long|null} value 
         */
        OAuthToken.prototype.setExpiry = function (value) {
            this.expiry = value;
        };
    
        return OAuthToken;
    }

}(angular));
